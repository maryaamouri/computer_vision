import mediapipe as mpimport cv2import timeimport numpyclass FaceDetector():    def __init__(self, minDetectionCon=0.5, ):        self.minDetectionCon = minDetectionCon        self.mpDraw= mp.solutions.drawing_utils        self.faceDetection= mp.solutions.face_detection.FaceDetection(minDetectionCon)    def findFaces(self,img,draw=True):        imgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)        self.results = self.faceDetection.process((imgRGB))        bboxes = []        if self.results.detections:            for id, detection in enumerate(self.results.detections):                #mpDraw.draw_detection(img,detection)                bboxC = detection.location_data.relative_bounding_box                ih, iw, ic = img.shape                bbox = int(bboxC.xmin * iw), int(bboxC.ymin * ih), \                       int(bboxC.width * iw), int(bboxC.height * ih)                bboxes.append([bbox,detection.score])                if draw:                    img = self.facyDraw(img,bbox)                    cv2.putText(img, f'{int(detection.score[0] * 100)}%',                            (bbox[0], bbox[1] - 20), cv2.FONT_HERSHEY_PLAIN,                            2, (55, 50, 230), 2)        return img, bboxes    def facyDraw(self,img,bbox, l =30,t=5, rt=1):        x,y,w,h = bbox        x1,y1 = x+w,y+h        cv2.rectangle(img, bbox, (10, 250, 255), rt)        # top left        cv2.line(img,(x,y), (x+l,y), (55,200,100),t)        cv2.line(img, (x, y), (x , y+ l), (25, 200, 100), t)        # bottom right        cv2.line(img, (x1, y1), (x1 - l, y1), (55, 200, 100), t)        cv2.line(img, (x1, y1), (x1, y1 - l), (25, 200, 100), t)        return imgdef main():    cap = cv2.VideoCapture('people/1.mp4')    #cap = cv2.VideoCapture(0)    p_time = 0    detector = FaceDetector()    while True:        success, img = cap.read()        img = cv2.resize(img, (1080, 720))        img,bboxes =detector.findFaces(img)        c_time = time.time()        fps = 1 / (c_time - p_time)        cv2.putText(img, f'FPS:{int(fps)}', (20, 70), cv2.FONT_HERSHEY_PLAIN, 3, (255, 0, 0), 2)        p_time = c_time        cv2.imshow('face-detection', img)        cv2.waitKey(1)if __name__ =="__main__":    main()