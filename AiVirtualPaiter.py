import cv2import timeimport osimport numpy as npimport HandTrackingModule as htm# SETTING CANVAScap = cv2.VideoCapture(0)image_width = 1080image_height =720cap.set(3,image_width)cap.set(4,image_height)detector= htm.handDetector(detectionCon=0.85)# SETTING COLORS POSITIONSred_pos = (int(image_width/5),int(image_height/10))blue_pos = (red_pos[0]*2,red_pos[1])green_pos =(red_pos[0]*3,red_pos[1])eraser_pos =(red_pos[0]*4,red_pos[1])selected_color = (0,0,255)selected_position = red_posbrush_thickness = 15xp, yp = 0,0imgCanvas = np.zeros((image_height,image_width,3),np.uint8)while True:    # get images and setting the canvas    succ, img = cap.read()    img = cv2.flip(img, 1)    img = cv2.resize(img,(image_width,image_height))    cv2.circle(img, blue_pos, 40, (255, 0, 0), cv2.FILLED)    cv2.circle(img, green_pos, 40, (0, 255, 0), cv2.FILLED)    cv2.circle(img, red_pos, 40 , (0, 0,255), cv2.FILLED)    cv2.circle(img, eraser_pos, 40, (50, 10, 10),2)    cv2.circle(img, selected_position, 50, selected_color, 3)    # 2. find hand landmarks    img = detector.findHands(img)    lmList = detector.findPosition(img, draw=False)    if len(lmList)!= 0:        # tip of index and middle fingers        x1,y1 = lmList[8][1:]        # tip of middle finger        x2,y2 = lmList[12][1:]        # 3. check which fingers are up        fingers = detector.fingersUP()        # 4. if selection mode - two fingers are up        if fingers[1]and fingers[2]:            xp, yp = 0, 0            print('selection')            # check if in header            if red_pos[1]-40<y1<red_pos[1]+40:                # if red selected                if red_pos[0]-30 <x1< red_pos[0]+30:                    selected_position = red_pos                    selected_color= (0,0,255)                # if green selected                if green_pos[0]-30 <x1< green_pos[0]+30:                    selected_position = green_pos                    selected_color= (0,255,0)                # if blue selected                if blue_pos[0]-30 <x1< blue_pos[0]+30:                    selected_position = blue_pos                    selected_color= (255,0,0)                # if eraser selected                if eraser_pos[0]-30 <x1< eraser_pos[0]+30:                    selected_position = eraser_pos                    selected_color= (0,0,0)            cv2.rectangle(img, (x1,y1),(x1+50,y1-30),selected_color, cv2.FILLED)        # 5. if Drawing mode - one finger is up        if fingers[1] and fingers[2] ==False:            print('drawing')            cv2.circle(img, (x1, y1),15, selected_color, cv2.FILLED)            if xp ==0 and yp ==0:                xp,yp =x1,y1            if selected_color==(0,0,0):                cv2.line(imgCanvas, (xp, yp), (x1, y1), selected_color,35)            else:                cv2.line(imgCanvas, (xp,yp), (x1,y1),selected_color,brush_thickness)            xp,yp = x1,y1#######################################    imgGray = cv2.cvtColor(imgCanvas,cv2.COLOR_BGR2GRAY)    _, imgInv = cv2.threshold(imgGray,50,255,cv2.THRESH_BINARY_INV)    imgInv = cv2.cvtColor(imgInv, cv2.COLOR_GRAY2BGR)    img = cv2.bitwise_and(img,imgInv)    img = cv2.bitwise_or(img,imgCanvas)#######################################    #img = cv2.addWeighted(img, 0.7, imgCanvas, 0.3, 0.0)    cv2.imshow("image", img)    cv2.waitKey(1)