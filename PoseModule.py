import cv2import mediapipe as mpimport timeimport mathclass PoseDetector():    def __init__(self, mode=False, upBody=False, smooth=True,                 detectionCon=0.5, trackCon=0.5):        self.mode=mode        self.upBody=upBody        self.smooth=smooth        self.detectionCon=detectionCon        self.trackCon=trackCon        self.mpPose = mp.solutions.pose        self.pose = self.mpPose.Pose(static_image_mode=self.mode,                                     model_complexity=self.upBody,                                     smooth_landmarks=self.smooth,                                     min_detection_confidence=self.detectionCon,                                     min_tracking_confidence=self.trackCon)        self.mpDraw= mp.solutions.drawing_utils    def findPose(self, img, draw=True):        img= cv2.resize(img,(1080,720))        imgRGB=cv2.cvtColor(img, cv2.COLOR_BGR2RGB)        self.results = self.pose.process(imgRGB)        if draw:            if self.results.pose_landmarks:                self.mpDraw.draw_landmarks(img,self.results.pose_landmarks,self.mpPose.POSE_CONNECTIONS)        return img    def findPosition(self,img, draw=True):        self.lmlist=[]        if self.results.pose_landmarks:            for id, lm in enumerate(self.results.pose_landmarks.landmark):                h,w,c = img.shape                #print(id,lm)                cx,cy = int(lm.x*w), int(lm.y*h)                self.lmlist.append([id,cx,cy])                if draw:                    cv2.circle(img,(cx,cy),10,(255,0,0), cv2.FILLED)        return self.lmlist    def findAngle ( self, img, p1,p2,p3, draw = True):        x1,y1 = self.lmlist[p1][1:]        x2, y2 = self.lmlist[p2][1:]        x3, y3 = self.lmlist[p3][1:]        angle = math.degrees(math.atan2(y3-y2,x3-x2)- math.atan2(y1-y2,x1-x2))        if angle < 0:            angle += 360        if angle > 180:            angle = 360-angle        #print(angle)        if draw:            cv2.line(img,(x1, y1),(x2, y2),(255,255,255),3)            cv2.line(img, (x3, y3), (x2, y2), (255, 255, 255), 3)            cv2.circle(img, (x1, y1), 10, (0,0, 255), cv2.FILLED)            cv2.circle(img, (x1, y1), 15, (0,0, 255), 2)            cv2.circle(img, (x2, y2), 10, (0,0, 255), cv2.FILLED)            cv2.circle(img,(x2, y2), 15, (0, 0, 255), 2)            cv2.circle(img, (x3, y3), 10,(0,0, 255), cv2.FILLED)            cv2.circle(img, (x3, y3), 15, (0, 0, 255), 2)            cv2.putText(img, str(int(angle)), (x2-80,y2+40),cv2.FONT_HERSHEY_PLAIN,2,(255,0,255),2 )        return angledef main():    cap = cv2.VideoCapture('data/2.mp4')    pTime = 0    detector = PoseDetector()    while True:        succ, img = cap.read()        img= detector.findPose(img)        lmlist= detector.findPosition(img)        #print(lmlist)        cv2.imshow('img',img)        cTime = time.time()        fps = 1/(cTime-pTime)        pTime= cTime        cv2.putText(img,str(int(fps)), (70,50), cv2.FONT_HERSHEY_PLAIN,3,(255,10,10),3)        cv2.waitKey(1)if __name__ == '__main__':    main()